//This file is automatically generated by generator.lua from https://github.com/gucio321/cimguizmo
//based on ImGuizmo.h file version XXX from ImGuizmo https://github.com/CedricGuillemet/ImGuizmo
#ifndef CIMGUIZMO_INCLUDED
#define CIMGUIZMO_INCLUDED

#define NUMHEADINGS 3 // this is because struct field in imgui_markdown is static so we can't wrap it to C

#include "cimgui.h"

#ifdef CIMGUI_DEFINE_ENUMS_AND_STRUCTS
#include <time.h>
typedef struct tm tm;


typedef enum {
      TRANSLATE_X = (1u << 0),
      TRANSLATE_Y = (1u << 1),
      TRANSLATE_Z = (1u << 2),
      ROTATE_X = (1u << 3),
      ROTATE_Y = (1u << 4),
      ROTATE_Z = (1u << 5),
      ROTATE_SCREEN = (1u << 6),
      SCALE_X = (1u << 7),
      SCALE_Y = (1u << 8),
      SCALE_Z = (1u << 9),
      BOUNDS = (1u << 10),
      SCALE_XU = (1u << 11),
      SCALE_YU = (1u << 12),
      SCALE_ZU = (1u << 13),
      TRANSLATE = TRANSLATE_X | TRANSLATE_Y | TRANSLATE_Z,
      ROTATE = ROTATE_X | ROTATE_Y | ROTATE_Z | ROTATE_SCREEN,
      SCALE = SCALE_X | SCALE_Y | SCALE_Z,
      SCALEU = SCALE_XU | SCALE_YU | SCALE_ZU,
      UNIVERSAL = TRANSLATE | ROTATE | SCALEU
   }OPERATION;
typedef enum {
      LOCAL,
      WORLD
   }MODE;
typedef enum {
      DIRECTION_X,
      DIRECTION_Y,
      DIRECTION_Z,
      PLANE_X,
      PLANE_Y,
      PLANE_Z,
      SELECTION,
      INACTIVE,
      TRANSLATION_LINE,
      SCALE_LINE,
      ROTATION_USING_BORDER,
      ROTATION_USING_FILL,
      HATCHED_AXIS_LINES,
      TEXT,
      TEXT_SHADOW,
      COUNT
   }COLOR;
typedef struct Style Style;
struct Style
{
      float TranslationLineThickness;
      float TranslationLineArrowSize;
      float RotationLineThickness;
      float RotationOuterLineThickness;
      float ScaleLineThickness;
      float ScaleLineCircleSize;
      float HatchedAxisLineThickness;
      float CenterCircleSize;
      ImVec4 Colors[COUNT];
};
#else

#endif // CIMGUI_DEFINE_ENUMS_AND_STRUCTS

#ifndef CIMGUI_DEFINE_ENUMS_AND_STRUCTS
typedef ImGuizmo::Style Style;
typedef ImGuizmo::COLOR COLOR;
typedef ImGuizmo::MODE MODE;
typedef ImGuizmo::OPERATION OPERATION;
#endif //CIMGUI_DEFINE_ENUMS_AND_STRUCTS
CIMGUI_API void SetDrawlist(ImDrawList* drawlist);
CIMGUI_API void BeginFrame(void);
CIMGUI_API void SetImGuiContext(ImGuiContext* ctx);
CIMGUI_API bool IsOver(void);
CIMGUI_API bool IsUsing(void);
CIMGUI_API bool IsUsingAny(void);
CIMGUI_API void Enable(bool enable);
CIMGUI_API void DecomposeMatrixToComponents(const float* matrix,float* translation,float* rotation,float* scale);
CIMGUI_API void RecomposeMatrixFromComponents(const float* translation,const float* rotation,const float* scale,float* matrix);
CIMGUI_API void SetRect(float x,float y,float width,float height);
CIMGUI_API void SetOrthographic(bool isOrthographic);
CIMGUI_API void DrawCubes(const float* view,const float* projection,const float* matrices,int matrixCount);
CIMGUI_API void DrawGrid(const float* view,const float* projection,const float* matrix,const float gridSize);
CIMGUI_API bool Manipulate(const float* view,const float* projection,OPERATION operation,MODE mode,float* matrix,float* deltaMatrix,const float* snap,const float* localBounds,const float* boundsSnap);
CIMGUI_API void ViewManipulate(float* view,float length,ImVec2 position,ImVec2 size,ImU32 backgroundColor);
CIMGUI_API void SetID(int id);
CIMGUI_API void SetGizmoSizeClipSpace(float value);
CIMGUI_API void AllowAxisFlip(bool value);
CIMGUI_API void SetAxisLimit(float value);
CIMGUI_API void SetPlaneLimit(float value);
CIMGUI_API Style* Style_Style(void);
CIMGUI_API void Style_destroy(Style* self);
CIMGUI_API Style* GetStyle(void);



#endif //CIMGUIZMO_INCLUDED




