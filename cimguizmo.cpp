//This file is automatically generated by generator.lua from https://github.com/gucio321/cimguizmo
//based on ImGuizmo.h file version XXX from ImGuizmo https://github.com/CedricGuillemet/ImGuizmo

#include "./imguizmo/ImGuizmo.h"
#include "cimguizmo.h"

CIMGUI_API void SetDrawlist(ImDrawList* drawlist)
{
    return ImGuizmo::SetDrawlist(drawlist);
}
CIMGUI_API void BeginFrame()
{
    return ImGuizmo::BeginFrame();
}
CIMGUI_API void SetImGuiContext(ImGuiContext* ctx)
{
    return ImGuizmo::SetImGuiContext(ctx);
}
CIMGUI_API bool IsOver()
{
    return ImGuizmo::IsOver();
}
CIMGUI_API bool IsUsing()
{
    return ImGuizmo::IsUsing();
}
CIMGUI_API bool IsUsingAny()
{
    return ImGuizmo::IsUsingAny();
}
CIMGUI_API void Enable(bool enable)
{
    return ImGuizmo::Enable(enable);
}
CIMGUI_API void DecomposeMatrixToComponents(const float* matrix,float* translation,float* rotation,float* scale)
{
    return ImGuizmo::DecomposeMatrixToComponents(matrix,translation,rotation,scale);
}
CIMGUI_API void RecomposeMatrixFromComponents(const float* translation,const float* rotation,const float* scale,float* matrix)
{
    return ImGuizmo::RecomposeMatrixFromComponents(translation,rotation,scale,matrix);
}
CIMGUI_API void SetRect(float x,float y,float width,float height)
{
    return ImGuizmo::SetRect(x,y,width,height);
}
CIMGUI_API void SetOrthographic(bool isOrthographic)
{
    return ImGuizmo::SetOrthographic(isOrthographic);
}
CIMGUI_API void DrawCubes(const float* view,const float* projection,const float* matrices,int matrixCount)
{
    return ImGuizmo::DrawCubes(view,projection,matrices,matrixCount);
}
CIMGUI_API void DrawGrid(const float* view,const float* projection,const float* matrix,const float gridSize)
{
    return ImGuizmo::DrawGrid(view,projection,matrix,gridSize);
}
CIMGUI_API bool Manipulate(const float* view,const float* projection,OPERATION operation,MODE mode,float* matrix,float* deltaMatrix,const float* snap,const float* localBounds,const float* boundsSnap)
{
    return ImGuizmo::Manipulate(view,projection,operation,mode,matrix,deltaMatrix,snap,localBounds,boundsSnap);
}
CIMGUI_API void ViewManipulate(float* view,float length,ImVec2 position,ImVec2 size,ImU32 backgroundColor)
{
    return ImGuizmo::ViewManipulate(view,length,position,size,backgroundColor);
}
CIMGUI_API void SetID(int id)
{
    return ImGuizmo::SetID(id);
}
CIMGUI_API void SetGizmoSizeClipSpace(float value)
{
    return ImGuizmo::SetGizmoSizeClipSpace(value);
}
CIMGUI_API void AllowAxisFlip(bool value)
{
    return ImGuizmo::AllowAxisFlip(value);
}
CIMGUI_API void SetAxisLimit(float value)
{
    return ImGuizmo::SetAxisLimit(value);
}
CIMGUI_API void SetPlaneLimit(float value)
{
    return ImGuizmo::SetPlaneLimit(value);
}
CIMGUI_API Style* Style_Style(void)
{
    return IM_NEW(Style)();
}
CIMGUI_API void Style_destroy(Style* self)
{
    IM_DELETE(self);
}
CIMGUI_API Style* GetStyle()
{
    return &ImGuizmo::GetStyle();
}

